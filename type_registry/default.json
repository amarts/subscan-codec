{
  "default": {
    "(AccountId, Balance)": {
      "type": "struct",
      "type_mapping": [
        [
          "account",
          "AccountId"
        ],
        [
          "balance",
          "Balance"
        ]
      ]
    },
    "AccountData": {
      "type": "struct",
      "type_mapping": [
        [
          "free",
          "Balance"
        ],
        [
          "reserved",
          "Balance"
        ],
        [
          "miscFrozen",
          "Balance"
        ],
        [
          "feeFrozen",
          "Balance"
        ]
      ]
    },
    "CandidateReceipt": {
      "type": "struct",
      "type_mapping": [
        [
          "parachainIndex",
          "ParaId"
        ],
        [
          "collator",
          "AccountId"
        ],
        [
          "signature",
          "CollatorSignature"
        ],
        [
          "headData",
          "HeadData"
        ],
        [
          "balanceUploads",
          "Vec<BalanceUpload>"
        ],
        [
          "egressQueueRoots",
          "Vec<EgressQueueRoot>"
        ],
        [
          "fees",
          "u64"
        ],
        [
          "blockDataHash",
          "Hash"
        ]
      ]
    },
    "AttestedCandidate": {
      "type": "struct",
      "type_mapping": [
        [
          "candidate",
          "CandidateReceipt"
        ],
        [
          "validityVotes",
          "Vec<ValidityVote>"
        ]
      ]
    },
    "FullIdentification": {
      "type": "struct",
      "type_mapping": [
        [
          "total",
          "Compact<Balance>"
        ],
        [
          "own",
          "Compact<Balance>"
        ],
        [
          "others",
          "Vec<IndividualExposure>"
        ]
      ]
    },
    "IdentificationTuple": {
      "type": "struct",
      "type_mapping": [
        [
          "validatorId",
          "ValidatorId"
        ],
        [
          "exposure",
          "FullIdentification"
        ]
      ]
    },
    "SetId": "U64",
    "Reasons": {
      "type": "enum",
      "value_list": [
        "Fee",
        "Misc",
        "All"
      ]
    },
    "RoundNumber": "U64",
    "SessionIndex": "U32",
    "AuctionIndex": "U32",
    "AuthIndex": "U32",
    "AuthorityIndex": "u64",
    "AuthorityWeight": "u64",
    "NextAuthority": {
      "type": "struct",
      "type_mapping": [
        [
          "AuthorityId",
          "AuthorityId"
        ],
        [
          "weight",
          "AuthorityWeight"
        ]
      ]
    },
    "AuthorityList": "Vec<NextAuthority>",
    "BalanceUpload": {
      "type": "struct",
      "type_mapping": [
        [
          "col1",
          "AccountId"
        ],
        [
          "col2",
          "u64"
        ]
      ]
    },
    "CollatorId": "H256",
    "DispatchClass": {
      "type": "enum",
      "value_list": [
        "Normal",
        "Operational"
      ]
    },
    "DispatchInfo": {
      "type": "struct",
      "type_mapping": [
        [
          "weight",
          "Weight"
        ],
        [
          "class",
          "DispatchClass"
        ],
        [
          "paysFee",
          "bool"
        ]
      ]
    },
    "EgressQueueRoot": {
      "type": "struct",
      "type_mapping": [
        [
          "col1",
          "ParaId"
        ],
        [
          "col2",
          "Hash"
        ]
      ]
    },
    "EventIndex": "u32",
    "IdentityFields": {
      "type": "set",
      "value_list": {
        "Display": 1,
        "Legal": 2,
        "Web": 4,
        "Riot": 8,
        "Email": 16,
        "PgpFingerprint": 32,
        "Image": 64,
        "Twitter": 128
      }
    },
    "IdentityInfoAdditional": {
      "type": "struct",
      "type_mapping": [
        [
          "field",
          "Data"
        ],
        [
          "value",
          "Data"
        ]
      ]
    },
    "IdentityInfo": {
      "type": "struct",
      "type_mapping": [
        [
          "additional",
          "Vec<IdentityInfoAdditional>"
        ],
        [
          "display",
          "Data"
        ],
        [
          "legal",
          "Data"
        ],
        [
          "web",
          "Data"
        ],
        [
          "riot",
          "Data"
        ],
        [
          "email",
          "Data"
        ],
        [
          "pgpFingerprint",
          "Option<H160>"
        ],
        [
          "image",
          "Data"
        ],
        [
          "twitter",
          "Data"
        ]
      ]
    },
    "Judgement": {
      "type": "enum",
      "type_mapping": [
        [
          "Unknown",
          "Null"
        ],
        [
          "FeePaid",
          "Balance"
        ],
        [
          "Reasonable",
          "Null"
        ],
        [
          "KnownGood",
          "Null"
        ],
        [
          "OutOfDate",
          "Null"
        ],
        [
          "LowQuality",
          "Null"
        ],
        [
          "Erroneous",
          "Null"
        ]
      ]
    },
    "Judgement<BalanceOf>": "Judgement",
    "LeasePeriod": "BlockNumber",
    "LeasePeriodOf": "LeasePeriod",
    "MaybeVrf": "[u8; 32]",
    "MemberCount": "u32",
    "MomentOf": "Moment",
    "MoreAttestations": "Null",
    "Multiplier": "u64",
    "Offender": {
      "type": "struct",
      "type_mapping": [
        [
          "col1",
          "ValidatorId"
        ],
        [
          "col2",
          "Exposure"
        ]
      ]
    },
    "PhantomData": "Null",
    "sp_std::marker::PhantomData<(AccountId, Event)>": "PhantomData",
    "Reporter": "AccountId",
    "OffenceDetails<AccountId, IdentificationTuple>": {
      "type": "struct",
      "type_mapping": [
        [
          "offender",
          "Offender"
        ],
        [
          "reporters",
          "Vec<Reporter>"
        ]
      ]
    },
    "OpenTipFinder": "(AccountId, Balance)",
    "OpenTipTip": "(AccountId, Balance)",
    "OpenTip<AccountId, BalanceOf, BlockNumber, Hash>": {
      "type": "struct",
      "type_mapping": [
        [
          "reason",
          "Hash"
        ],
        [
          "who",
          "AccountId"
        ],
        [
          "finder",
          "Option<OpenTipFinder>"
        ],
        [
          "closes",
          "Option<BlockNumber>"
        ],
        [
          "tips",
          "Vec<OpenTipTip>"
        ]
      ]
    },
    "ParaIdOf": "ParaId",
    "ParaScheduling": {
      "type": "enum",
      "value_list": [
        "Always",
        "Dynamic"
      ]
    },
    "ParaInfo": {
      "type": "struct",
      "type_mapping": [
        [
          "scheduling",
          "ParaScheduling"
        ]
      ]
    },
    "(ReferendumInfo<BlockNumber, Hash>)": {
      "type": "struct",
      "type_mapping": [
        [
          "end",
          "BlockNumber"
        ],
        [
          "proposalHash",
          "Hash"
        ],
        [
          "threshold",
          "VoteThreshold"
        ],
        [
          "delay",
          "BlockNumber"
        ]
      ]
    },
    "RegistrarIndex": "u32",
    "RegistrarInfo": {
      "type": "struct",
      "type_mapping": [
        [
          "account",
          "AccountId"
        ],
        [
          "fee",
          "Balance"
        ],
        [
          "fields",
          "IdentityFields"
        ]
      ]
    },
    "Registration": {
      "type": "struct",
      "type_mapping": [
        [
          "judgements",
          "Vec<RegistrationJudgement>"
        ],
        [
          "deposit",
          "Balance"
        ],
        [
          "info",
          "IdentityInfo"
        ]
      ]
    },
    "RegistrationJudgement": {
      "type": "struct",
      "type_mapping": [
        [
          "col1",
          "RegistrarIndex"
        ],
        [
          "col2",
          "Judgement"
        ]
      ]
    },
    "ReportIdOf": "Hash",
    "SubId": "u32",
    "Weight": "u32",
    "WeightMultiplier": "u64",
    "WinningDataEntry": {
      "type": "struct",
      "type_mapping": [
        [
          "col1",
          "AccountId"
        ],
        [
          "col2",
          "ParaIdOf"
        ],
        [
          "col3",
          "BalanceOf"
        ]
      ]
    },
    "WinningData": "Vec<WinningDataEntry>",
    "WithdrawReasons": {
      "type": "set",
      "value_list": {
        "TransactionPayment": 1,
        "Transfer": 2,
        "Reserve": 4,
        "Fee": 8,
        "Tip": 16
      }
    },
    "Index": "U32",
    "Kind": "[u8; 16]",
    "Nominations": {
      "type": "struct",
      "type_mapping": [
        [
          "targets",
          "Vec<AccountId>"
        ],
        [
          "submittedIn",
          "EraIndex"
        ],
        [
          "suppressed",
          "bool"
        ]
      ]
    },
    "OpaqueTimeSlot": "Bytes",
    "Box<<T as Trait<I>>::Proposal>": "BoxProposal",
    "<AuthorityId as RuntimeAppPublic>::Signature": "AuthoritySignature",
    "&[u8]": "Bytes",
    "Forcing": {
      "type": "enum",
      "value_list": [
        "NotForcing",
        "ForceNew",
        "ForceNone"
      ]
    },
    "Heartbeat": {
      "type": "struct",
      "type_mapping": [
        [
          "blockNumber",
          "BlockNumber"
        ],
        [
          "networkState",
          "OpaqueNetworkState"
        ],
        [
          "sessionIndex",
          "SessionIndex"
        ],
        [
          "authorityId",
          "AuthorityId"
        ]
      ]
    },
    "RewardDestination": {
      "type": "enum",
      "value_list": [
        "Staked",
        "Stash",
        "Controller"
      ]
    },
    "ConsensusEngineId": "[u8; 4]",
    "DigestItem": {
      "type": "enum",
      "type_mapping": [
        [
          "Other",
          "Vec<u8>"
        ],
        [
          "AuthoritiesChange",
          "Vec<AuthorityId>"
        ],
        [
          "ChangesTrieRoot",
          "Hash"
        ],
        [
          "SealV0",
          "SealV0"
        ],
        [
          "Consensus",
          "Consensus"
        ],
        [
          "Seal",
          "Seal"
        ],
        [
          "PreRuntime",
          "PreRuntime"
        ]
      ]
    },
    "Digest": {
      "type": "struct",
      "type_mapping": [
        [
          "logs",
          "Vec<DigestItem<Hash>>"
        ]
      ]
    },
    "DigestOf": "Digest",
    "SpanIndex": "u32",
    "SlashingSpans": {
      "type": "struct",
      "type_mapping": [
        [
          "spanIndex",
          "SpanIndex"
        ],
        [
          "lastStart",
          "EraIndex"
        ],
        [
          "prior",
          "Vec<EraIndex>"
        ]
      ]
    },
    "slashing::SlashingSpans": "SlashingSpans",
    "SpanRecord": {
      "type": "struct",
      "type_mapping": [
        [
          "slashed",
          "Balance"
        ],
        [
          "paidOut",
          "Balance"
        ]
      ]
    },
    "slashing::SpanRecord<BalanceOf>": "SpanRecord",
    "UnappliedSlashOther": {
      "type": "struct",
      "type_mapping": [
        [
          "account",
          "AccountId"
        ],
        [
          "amount",
          "Balance"
        ]
      ]
    },
    "UnappliedSlash": {
      "type": "struct",
      "type_mapping": [
        [
          "validator",
          "AccountId"
        ],
        [
          "own",
          "AccountId"
        ],
        [
          "others",
          "Vec<UnappliedSlashOther>"
        ],
        [
          "reporters",
          "Vec<AccountId>"
        ],
        [
          "payout",
          "Balance"
        ]
      ]
    },
    "Keys": "SessionKeysSubstrate",
    "Header": {
      "type": "struct",
      "type_mapping": [
        [
          "parent_hash",
          "H256"
        ],
        [
          "number",
          "Compact<BlockNumber>"
        ],
        [
          "state_root",
          "H256"
        ],
        [
          "extrinsics_root",
          "H256"
        ],
        [
          "digest",
          "Digest"
        ]
      ]
    },
    "DispatchError": {
      "type": "struct",
      "type_mapping": [
        [
          "module",
          "Option<u8>"
        ],
        [
          "error",
          "u8"
        ]
      ]
    },
    "DispatchError1031": {
      "type": "struct",
      "type_mapping": [
        [
          "module",
          "Option<u8>"
        ],
        [
          "error",
          "u8"
        ]
      ]
    },
    "DispatchResult": {
      "type": "enum",
      "type_mapping": [
        [
          "Ok",
          "Null"
        ],
        [
          "Error",
          "DispatchError"
        ]
      ]
    },
    "ActiveRecovery": {
      "type": "struct",
      "type_mapping": [
        [
          "created",
          "BlockNumber"
        ],
        [
          "deposit",
          "Balance"
        ],
        [
          "friends",
          "Vec<AccountId>"
        ]
      ]
    },
    "RecoveryConfig": {
      "type": "struct",
      "type_mapping": [
        [
          "delayPeriod",
          "BlockNumber"
        ],
        [
          "deposit",
          "Balance"
        ],
        [
          "friends",
          "Vec<AccountId>"
        ],
        [
          "threshold",
          "u16"
        ]
      ]
    },
    "BidKindVouch": {
      "type": "struct",
      "type_mapping": [
        [
          "account",
          "AccountId"
        ],
        [
          "amount",
          "Balance"
        ]
      ]
    },
    "BidKind": {
      "type": "enum",
      "type_mapping": [
        [
          "Deposit",
          "Balance"
        ],
        [
          "Vouch",
          "BidKindVouch"
        ]
      ]
    },
    "Bid": {
      "type": "struct",
      "type_mapping": [
        [
          "who",
          "AccountId"
        ],
        [
          "kind",
          "BidKind"
        ],
        [
          "value",
          "Balance"
        ]
      ]
    },
    "StrikeCount": "u32",
    "VouchingStatus": {
      "type": "enum",
      "value_list": [
        "Vouching",
        "Banned"
      ]
    },
    "ExtrinsicMetadata": {
      "type": "struct",
      "type_mapping": [
        [
          "version",
          "u8"
        ],
        [
          "signedExtensions",
          "Vec<Bytes>"
        ]
      ]
    }
  }
}